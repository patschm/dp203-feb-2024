{
	"name": "M3_1_1 Using Spark and Data Frames",
	"properties": {
		"folder": {
			"name": "Module 3.1"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparky",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bb1744a3-eccf-47a1-bab9-a9ee64b469d2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b9fc0ff8-96c9-40f6-b971-1c711883d3a0/resourceGroups/Demos/providers/Microsoft.Synapse/workspaces/ps-synapse-managed/bigDataPools/sparky",
				"name": "sparky",
				"type": "Spark",
				"endpoint": "https://ps-synapse-managed.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparky",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Parameters\r\n",
					"In menu (...) Toggle Parameter cell"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"lakepath = 'abfss://files@pssynapselake.dfs.core.windows.net/testdata/'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### My First Dataframe\r\n",
					"Dataframes are the heart of spark notebooks.\r\n",
					"They have two types of operations: \r\n",
					"- Transformations. Like select(), where(), withColumn() \r\n",
					"- Actions. Like count(), collect(), show()\r\n",
					"\r\n",
					"Actions will fetch the data.\r\n",
					"\r\n",
					"Transformations will not.\r\n",
					"\r\n",
					"More operations [Here](https://api-docs.databricks.com/python/pyspark/latest/pyspark.sql/dataframe.html)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"#dataarray = from_json(\"\", \"{'www':'vvv'}\")\r\n",
					"#print(dataarray)\r\n",
					"\r\n",
					"_data = [\r\n",
					"    [0,\"Menno\",\"Wal\",\"Ven Online\",'{\"StreetName\":\"Emmakade\",\"Number\":92,\"City\":\"Breda\",\"Region\":\"Noord Brabant\",\"Country\":\"Nederland\"}'],\r\n",
					"    [1,\"Xavier\",\"Jong\",\"Vries N.V.\",'{\"StreetName\":\"Basrijk\",\"Number\":85,\"City\":\"Utrecht\",\"Region\":\"Utrecht\",\"Country\":\"Nederland\"}']\r\n",
					"]\r\n",
					"# Columns for the data\r\n",
					"_cols = ['Id', 'FirstName', 'LastName', 'CompanyName', 'Address']\r\n",
					"# Lets create the raw Data Frame\r\n",
					"df_raw = spark.createDataFrame(data = _data, schema = _cols)\r\n",
					"#df_raw.printSchema()\r\n",
					"#display(df_raw)\r\n",
					"\r\n",
					"schema = \"StreetName STRING, Number INT, City STRING, Region STRING, Country STRING\"\r\n",
					"df = df_raw.withColumn(\"Address\", from_json(col(\"Address\"), schema))\r\n",
					"df.printSchema()\r\n",
					"display(df)\r\n",
					"#df.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Read from csv\r\n",
					"You can find the abfss path in the datalake on the file properties"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Using pyspark (default)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load(lakepath + 'csv/customers*.csv', format='csv', header=True)\r\n",
					"df.printSchema()\r\n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Using Scala"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": false
				},
				"source": [
					"%%spark\r\n",
					"val df = spark.read.format(\"csv\").option(\"header\", \"true\").load(\"abfss://files@pssynapselake.dfs.core.windows.net/testdata/csv/customers*.csv\")\r\n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Read from Json"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.load(lakepath + 'json/customers*/*.json', format='json')\r\n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Read from parquet"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.load(lakepath + '/parquet/customers*.parquet', format='parquet')\r\n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Read data with schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"addressSchema = StructType([\r\n",
					"    StructField(\"StreetName\", StringType()),\r\n",
					"    StructField(\"Number\", IntegerType()),\r\n",
					"    StructField(\"City\", StringType()),\r\n",
					"    StructField(\"Region\", StringType()),\r\n",
					"    StructField(\"Country\", StringType())\r\n",
					"])\r\n",
					"\r\n",
					"tableSchema = StructType([\r\n",
					"    StructField(\"Id\", IntegerType()),\r\n",
					"    StructField(\"FirstName\", StringType()),\r\n",
					"    StructField(\"LastName\", StringType()),\r\n",
					"    StructField(\"CompanyName\", StringType()),\r\n",
					"    StructField(\"Address\", addressSchema)\r\n",
					"])\r\n",
					"\r\n",
					"df = spark.read.load(lakepath + \"parquet/customers*.parquet\", format=\"parquet\", schema=tableSchema)\r\n",
					"#df = spark.read.option(\"schema\", tableSchema).parquet(lakepath + \"parquet/customers.parquet\")\r\n",
					"df.printSchema()\r\n",
					"display(df)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Filtering, Grouping and more"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#spark.conf.set('spark.sql.parquet.int96RebaseModeInRead', 'CORRECTED') # TimeStamp Issues\r\n",
					"df = spark.read.load(lakepath + \"parquet/orders*.parquet\", format=\"parquet\")\r\n",
					"dfproducts = spark.read.load(lakepath + \"parquet/products*.parquet\", format=\"parquet\")\r\n",
					"df.printSchema()\r\n",
					"#display(df.limit(10))\r\n",
					"\r\n",
					"#projecting\r\n",
					"df = df.select(\"Quantity\", \"TotalPrice\", \"ProductId\")\r\n",
					"#display(df.limit(10))\r\n",
					"\r\n",
					"#joining\r\n",
					"df = df.join(dfproducts, df.ProductId == dfproducts.Id, \"inner\")\r\n",
					"#display(df)\r\n",
					"\r\n",
					"#grouping\r\n",
					"df = df.select(\"TotalPrice\", concat(df.BrandName, lit(\" \"), df.Name).alias(\"Product\")) \\\r\n",
					"    .groupBy(\"Product\").agg(sum(\"TotalPrice\").alias(\"Total\"))\r\n",
					"#display(df)\r\n",
					"\r\n",
					"#ordering\r\n",
					"df = df.orderBy(col(\"Total\").desc())\r\n",
					"display(df)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create a view"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.load(lakepath + \"parquet/orders*.parquet\", format=\"parquet\")\r\n",
					"dfproducts = spark.read.load(lakepath + \"parquet/products*.parquet\", format=\"parquet\")\r\n",
					"df = df.select(\"Quantity\", \"TotalPrice\", \"OrderDate\", \"ProductId\")\r\n",
					"df = df.join(dfproducts, df.ProductId == dfproducts.Id)\r\n",
					"\r\n",
					"df.createOrReplaceTempView(\"orders\")\r\n",
					"\r\n",
					"order_df = spark.sql(\"SELECT * FROM orders\")\r\n",
					"\r\n",
					"display(order_df.limit(10))"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Use View in SQL"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT concat(BrandName, \" \", Name) As Product, SUM(TotalPrice) As Total FROM orders\r\n",
					"GROUP BY Product\r\n",
					"ORDER BY Total DESC"
				],
				"execution_count": null
			}
		]
	}
}