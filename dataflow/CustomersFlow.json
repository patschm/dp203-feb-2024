{
	"name": "CustomersFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "CustomersCsv"
				},
				{
					"name": "DimGeo"
				},
				{
					"name": "DimCustomersOrig"
				}
			],
			"sinks": [
				{
					"name": "DimCustomers"
				}
			],
			"transformations": [
				{
					"name": "LookupGeoId"
				},
				{
					"name": "AddColums"
				},
				{
					"name": "Select"
				},
				{
					"name": "NotExists"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as long,",
				"          FirstName as string,",
				"          LastName as string,",
				"          CompanyName as string,",
				"          StreetName as string,",
				"          Number as integer,",
				"          City as string,",
				"          Region as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     wildcardPaths:['testdata/csv/customers*'],",
				"     fileSystem: 'files',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> CustomersCsv",
				"source(output(",
				"          Id as long,",
				"          City as string,",
				"          Region as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> DimGeo",
				"source(output(",
				"          Id as long,",
				"          AlternateKey as long,",
				"          FirstName as string,",
				"          LastName as string,",
				"          CompanyName as string,",
				"          StreetName as string,",
				"          Number as integer,",
				"          GeoId as long,",
				"          City as string,",
				"          Region as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> DimCustomersOrig",
				"CustomersCsv, DimGeo lookup(CustomersCsv@City == DimGeo@City,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupGeoId",
				"LookupGeoId derive(AlternateKey = CustomersCsv@Id,",
				"          GeoId = DimGeo@Id) ~> AddColums",
				"AddColums select(mapColumn(",
				"          FirstName,",
				"          LastName,",
				"          CompanyName,",
				"          StreetName,",
				"          Number,",
				"          City = CustomersCsv@City,",
				"          Region = CustomersCsv@Region,",
				"          Country = CustomersCsv@Country,",
				"          AlternateKey,",
				"          GeoId,",
				"          Id = CustomersCsv@Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select",
				"Select, DimCustomersOrig exists(Select@AlternateKey == DimCustomersOrig@AlternateKey,",
				"     negate:true,",
				"     broadcast: 'auto')~> NotExists",
				"NotExists sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: 'Staging') ~> DimCustomers"
			]
		}
	}
}